#!/usr/bin/python

# For Google Code Hosting.
import gdata.projecthosting.client
import gdata.projecthosting.data
import gdata.gauth
import gdata.client
import gdata.data
import atom.http_core
import atom.core

# For everything else.
import sys
import re
import getopt
import string
import xml.sax
import xml.sax.handler

def usage(output_stream=sys.stdout):
  output_stream.write("TBD\n")

#########################################################################
###
### This bit of code is from Wai Yip Tung, see the original at:
###
### http://code.activestate.com/recipes/534109-xml-to-python-data-structure/
###
### He clearly intended it to be open source, even though he didn't
### put an explicit license on it.  His documentation and comments
### make that clear:
###
###   To access its data, you can do the following:
###   
###   person.gender        -> 'm'     # an attribute
###   person['gender']     -> 'm'     # alternative dictionary syntax
###   person.name          -> 'fred'  # shortcut to a text node
###   person.phone[0].type -> 'home'  # multiple elements becomes an list
###   person.phone[0].data -> '54321' # use .data to get the text value
###   str(person.phone[0]) -> '54321' # alternative syntax for the text value
###   person[0]            -> person  # if only one <person>, it can still
###                                   # be used as if it's a list of 1 elt.
###   'address' in person  -> False   # test for existence of an attr or child
###   person.address       -> None    # non-exist element returns None
###   bool(person.address) -> False   # has any 'address' data
###                                   # (attr, child or text)
###   person.note          -> '"A <note>"'
###   
###   This function is inspired by David Mertz' Gnosis objectify
###   utilities. The motivation of writing this recipe is for
###   simplicity. With just 100 lines of code packaged into a single
###   function, it can easily be embedded with other code for ease of
###   distribution.
###
#########################################################################

def xml2obj(src):
    """A simple function to convert XML data into a native Python object."""

    non_id_char = re.compile('[^_0-9a-zA-Z]')
    def _name_mangle(name):
        return non_id_char.sub('_', name)

    class DataNode(object):
        def __init__(self):
            self._attrs = {}    # XML attributes and child elements
            self.data = None    # child text data
        def __len__(self):
            # treat single element as a list of 1
            return 1
        def __getitem__(self, key):
            if isinstance(key, basestring):
                return self._attrs.get(key,None)
            else:
                return [self][key]
        def __contains__(self, name):
            return self._attrs.has_key(name)
        def __nonzero__(self):
            return bool(self._attrs or self.data)
        def __getattr__(self, name):
            if name.startswith('__'):
                # need to do this for Python special methods???
                raise AttributeError(name)
            return self._attrs.get(name,None)
        def _add_xml_attr(self, name, value):
            if name in self._attrs:
                # multiple attribute of the same name are represented by a list
                children = self._attrs[name]
                if not isinstance(children, list):
                    children = [children]
                    self._attrs[name] = children
                children.append(value)
            else:
                self._attrs[name] = value
        def __str__(self):
            return self.data or ''
        def __repr__(self):
            items = sorted(self._attrs.items())
            if self.data:
                items.append(('data', self.data))
            return u'{%s}' % ', '.join([u'%s:%s' % (k,repr(v)) for k,v in items])

    class TreeBuilder(xml.sax.handler.ContentHandler):
        def __init__(self):
            self.stack = []
            self.root = DataNode()
            self.current = self.root
            self.text_parts = []
        def startElement(self, name, attrs):
            self.stack.append((self.current, self.text_parts))
            self.current = DataNode()
            self.text_parts = []
            # xml attributes --> python attributes
            for k, v in attrs.items():
                self.current._add_xml_attr(_name_mangle(k), v)
        def endElement(self, name):
            text = ''.join(self.text_parts).strip()
            if text:
                self.current.data = text
            if self.current._attrs:
                obj = self.current
            else:
                # a text only node is simply represented by the string
                obj = text or ''
            self.current, self.text_parts = self.stack.pop()
            self.current._add_xml_attr(_name_mangle(name), obj)
        def characters(self, content):
            self.text_parts.append(content)

    builder = TreeBuilder()
    if isinstance(src,basestring):
        xml.sax.parseString(src, builder)
    else:
        xml.sax.parse(src, builder)
    return builder.root._attrs.values()[0]

#########################################################################
###
### End section of code by Wai Yip Tung.
###
#########################################################################

# An issue coming from JIRA looks like this:
#
# <item>
#  <title>[MAD-174] summary of issue</title>
#  <link>URL to issue (e.g., http://sfgovdt.jira.com/browse/MAD-174</link>
#  <project id="10020" key="MAD">Enterprise Addressing System</project>
#  <description>&lt;p&gt;Should probably consistently upper case things on the server where it matters (as with streets).&lt;/p&gt;</description>
#  <environment/>
#  <key id="10273">MAD-174</key>
#  <summary>same as summary part of summary -- use this</summary>
#  <type id="1" iconUrl="http://sfgovdt.jira.com/images/icons/bug.gif">Bug</type>
#  <priority id="3"
#            iconUrl="http://sfgovdt.jira.com/images/icons/priority_major.gif"
#    >Major</priority>
#  <status id="1"
#          iconUrl="http://sfgovdt.jira.com/images/icons/status_open.gif"
#    >Open</status>
#  <resolution id="-1">Unresolved</resolution>
#  <assignee username="pmccullough">Paul McCullough</assignee>
#  <reporter username="pmccullough">Paul McCullough</reporter>
#  <created>Wed, 8 Dec 2010 17:28:55 -0800</created>
#  <updated>Wed, 8 Dec 2010 17:28:55 -0800</updated>
#  <version>1.0 beta</version>
#  <fixVersion>1.0</fixVersion>
#  <due/>
#  <votes>0</votes>
#  <comments>
#   <comment id="10378"
#            author="pmccullough"
#            created="Fri, 3 Dec 2010 15:39:04 -0800"
#     >&lt;p&gt;Attached is a histogram of unit nums in EAS.&lt;/p&gt;
#     &lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
#lt;pre class="code-java"&gt;select count(*), unit_num
#rom addresses
#roup by unit_num
#rder by unit_num&lt;/pre&gt;
#lt;/div&gt;&lt;/div&gt;</comment>
# </comments>
# <attachments>
#  <attachment id="10023"
#    name="distinct_unit_num.csv"
#    size="75809"
#    author="pmccullough"
#    created="Fri, 3 Dec 2010 15:39:04 -0800"/>
#  </attachments>
#  <subtasks></subtasks>
#  <customfields>
#   <customfield id="customfield_10011"
#                key="com.atlassian.jira.plugin.labels:labels">
#    <customfieldname>Epic/Theme</customfieldname>
#    <customfieldvalues>
#      <customfieldvalue><![CDATA[]]></customfieldvalue>
#    </customfieldvalues>
#   </customfield>
#  </customfields>
# </item>

class Issue():
  def __init__(self,
               summary,                # (string) One-liner summary.
               description,            # (string) Initial description.
               source_link,            # (string) URL to original bug.
               source_key,             # (string) Unique id of original bug.
               issue_type,             # (string) defect / task / enhancement
               priority,               # (string) 
               status,                 # (string)
               resolution,             # (string)
               assignee,               # (string)
               date_created,           # (datetime)
               date_last_updated,      # (datetime)
               version_filed_against,  # (string)
               version_fixed_in,       # (string)
               ):
    self.summary               = summary
    self.description           = description
    self.source_link           = source_link
    self.source_key            = source_key
    self.issue_type            = issue_type
    self.priority              = priority
    self.status                = status
    self.resolution            = resolution
    self.assignee              = assignee
    self.date_created          = date_created
    self.date_last_updated     = date_last_updated
    self.version_filed_against = version_filed_against
    self.version_fixed_in      = version_fixed_in

  def __str__(self):
    return """Issue %s: %s
  %s
  
  Source URL: %s
  Assignee:   %s
  Type:       %s
  Priority:   %s
  Status:     %s
  Resolution: %s
  END ISSUE

  """ % (self.source_key,
         self.summary,
         self.description,
         self.source_link,
         self.assignee,
         self.issue_type,
         self.priority,
         self.status,
         self.resolution,
         )


def issue_from_jira(jira_xml_obj):
  """Return a generic Issue object based on JIRA_XML_OBJ."""
  def safe(stringthing):
    if isinstance(stringthing, basestring): # TODO: Or ask if unicode?
      return stringthing.encode('ascii', 'xmlcharrefreplace')
    return stringthing
  issue = Issue(safe(jira_xml_obj.summary),
                safe(jira_xml_obj.description),
                safe(jira_xml_obj.link),
                safe(jira_xml_obj.key),
                safe(jira_xml_obj.type),
                safe(jira_xml_obj.priority),
                safe(jira_xml_obj.status),
                safe(jira_xml_obj.resolution),
                safe(jira_xml_obj.assignee),
                safe(jira_xml_obj.created),
                safe(jira_xml_obj.updated),
                safe(jira_xml_obj.version),
                safe(jira_xml_obj.fixVersion))
  sys.stdout.flush()
  print issue


class Project():
  """A GCH Project, reachable through a client."""
  def __init__(self, name, client):
    self.name = name
    self.client = client
    
  def show_all_issues(self):
    """Show all the issues in a project."""
    feed = self.client.get_issues(self.name)
    for issue in feed.entry:
      print issue.title.text

  def create_issue(self, title, summary):
    """Create an issue."""
    return self.client.add_issue(self.name, title, summary,
                                 "kfogel@gmail.com", labels=[])


def authenticate_client(client, project, username, password):
  """Authenticate CLIENT to PROJECT, with USERNAME and PASSWORD."""
  client.client_login(username, password, source=project, service='code')


def main():
  error_exit   = False
  project_name = None
  username     = None
  password     = None
  issues_xml   = None

  try:
    opts, args = getopt.getopt(sys.argv[1:],
                               '',
                               [ "project=",
                                 "username=",
                                 "password=",
                                 "issues-xml=",   # XML data source file
                                 "issues-type=",  # e.g., "jira", etc.
                               ])
  except getopt.GetoptError:
    sys.stderr.write("Error: problem processing options\n")
    usage(sys.stderr)
    sys.exit(1)

  for opt, val in opts:
    if opt == '--help' or opt == '-h' or opt == '-?':
      usage()
      sys.exit(0)
    elif opt == '--project':
      project_name = val
    elif opt == '--username':
      username = val
    elif opt == '--password':
      password = val
    elif opt == '--issues-xml':
      issues_xml = file(val)
    elif opt == '--issues-type':
      issues_type = val
    else:
      sys.stderr.write("Error: unrecognized option: '%s'\n" % opt)
      error_exit = True

  if issues_type is None or issues_type.lower() not in ("jira"):
    sys.stderr.write("Error: unrecognized issues type: '%s'\n" % issues_type)
    error_exit = True

  if error_exit:
    usage(sys.stderr)
    sys.exit(1)

  # client = gdata.projecthosting.client.ProjectHostingClient()
  # authenticate_client(client, project_name, username, password)
  # proj = Project(project_name, client)
  # 
  # proj.show_all_issues()
  # 
  # print ""
  # print "### Now creating an issue:"
  # print ""
  # new_issue = proj.create_issue("TEST yet another issue",
  #                               "The summary for the issue we just created.")
  # print ""
  # print "### Now showing issues again:"
  # print ""
  # proj.show_all_issues()
  # print ""
  # print "### Now go delete that issue via the UI (since that's the only way)."
  # print ""

  # Try parsing some JIRA XML.
  issues = xml2obj(issues_xml)
  # Cdr down the stack until we are the object of our desires.
  if issues.channel:
    issues = issues.channel.item
  for jira_issue in issues:
    issue_from_jira(jira_issue)
  issues_xml.close()

if __name__ == '__main__':
  main()
