#!/usr/bin/python

# For Google Code Hosting.
import gdata.projecthosting.client
import gdata.projecthosting.data
import gdata.gauth
import gdata.client
import gdata.data
import atom.http_core
import atom.core

# For everything else.
import sys
import re
import getopt
import string
import xml.sax
import xml.sax.handler


def usage(output_stream=sys.stdout):
  output_stream.write("TBD\n")

# An issue coming from JIRA looks like this:
#
# <item>
#  <title>[MAD-174] summary of issue</title>
#  <link>URL to issue (e.g., http://sfgovdt.jira.com/browse/MAD-174</link>
#  <project id="10020" key="MAD">Enterprise Addressing System</project>
#  <description>&lt;p&gt;Should probably consistently upper case things on the server where it matters (as with streets).&lt;/p&gt;</description>
#  <environment/>
#  <key id="10273">MAD-174</key>
#  <summary>same as summary part of summary -- use this</summary>
#  <type id="1" iconUrl="http://sfgovdt.jira.com/images/icons/bug.gif">Bug</type>
#  <priority id="3"
#            iconUrl="http://sfgovdt.jira.com/images/icons/priority_major.gif"
#    >Major</priority>
#  <status id="1"
#          iconUrl="http://sfgovdt.jira.com/images/icons/status_open.gif"
#    >Open</status>
#  <resolution id="-1">Unresolved</resolution>
#  <assignee username="pmccullough">Paul McCullough</assignee>
#  <reporter username="pmccullough">Paul McCullough</reporter>
#  <created>Wed, 8 Dec 2010 17:28:55 -0800</created>
#  <updated>Wed, 8 Dec 2010 17:28:55 -0800</updated>
#  <version>1.0 beta</version>
#  <fixVersion>1.0</fixVersion>
#  <due/>
#  <votes>0</votes>
#  <comments>
#   <comment id="10378"
#            author="pmccullough"
#            created="Fri, 3 Dec 2010 15:39:04 -0800"
#     >&lt;p&gt;Attached is a histogram of unit nums in EAS.&lt;/p&gt;
#     &lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
#lt;pre class="code-java"&gt;select count(*), unit_num
#rom addresses
#roup by unit_num
#rder by unit_num&lt;/pre&gt;
#lt;/div&gt;&lt;/div&gt;</comment>
# </comments>
# <attachments>
#  <attachment id="10023"
#    name="distinct_unit_num.csv"
#    size="75809"
#    author="pmccullough"
#    created="Fri, 3 Dec 2010 15:39:04 -0800"/>
#  </attachments>
#  <subtasks></subtasks>
#  <customfields>
#   <customfield id="customfield_10011"
#                key="com.atlassian.jira.plugin.labels:labels">
#    <customfieldname>Epic/Theme</customfieldname>
#    <customfieldvalues>
#      <customfieldvalue><![CDATA[]]></customfieldvalue>
#    </customfieldvalues>
#   </customfield>
#  </customfields>
# </item>

class Issue():
  def __init__(self):
    pass

class parse_jira_xml(xml.sax.ContentHandler):
  def __init__(self):
    pass

  def startDocument(self):
    pass

  def endDocument(self):
    pass

  def startElement(self, name, attrs):
    if name == 'item':
      issue = Issue()
      item_type = attrs.get('type')
      if item_type is not None:
        print "Item type:", item_type
      else:
        print "As expected, no item type."

  def endElement(self, name):
    pass


class Project():
  """A GCH Project, reachable through a client."""
  def __init__(self, name, client):
    self.name = name
    self.client = client
    
  def show_all_issues(self):
    """Show all the issues in a project."""
    feed = self.client.get_issues(self.name)
    for issue in feed.entry:
      print issue.title.text

  def create_issue(self, title, summary):
    """Create an issue."""
    return self.client.add_issue(self.name, title, summary,
                                 "kfogel@gmail.com", labels=[])


def authenticate_client(client, project, username, password):
  """Authenticate CLIENT to PROJECT, with USERNAME and PASSWORD."""
  client.client_login(username, password, source=project, service='code')


def main():
  error_exit   = False
  project_name = None
  username     = None
  password     = None
  issues_xml   = None

  try:
    opts, args = getopt.getopt(sys.argv[1:],
                               '',
                               [ "project=",
                                 "username=",
                                 "password=",
                                 "issues-xml=",   # XML data source file
                                 "issues-type=",  # e.g., "jira", etc.
                               ])
  except getopt.GetoptError:
    sys.stderr.write("Error: problem processing options\n")
    usage(sys.stderr)
    sys.exit(1)

  for opt, val in opts:
    if opt == '--help' or opt == '-h' or opt == '-?':
      usage()
      sys.exit(0)
    elif opt == '--project':
      project_name = val
    elif opt == '--username':
      username = val
    elif opt == '--password':
      password = val
    elif opt == '--issues-xml':
      issues_xml = file(val)
    elif opt == '--issues-type':
      issues_type = val
    else:
      sys.stderr.write("Error: unrecognized option: '%s'\n" % opt)
      error_exit = True

  if issues_type is None or issues_type.lower() not in ("jira"):
    sys.stderr.write("Error: unrecognized issues type: '%s'\n" % issues_type)
    error_exit = True

  if error_exit:
    usage(sys.stderr)
    sys.exit(1)

  client = gdata.projecthosting.client.ProjectHostingClient()
  authenticate_client(client, project_name, username, password)
  proj = Project(project_name, client)
  proj.show_all_issues()
  print ""
  print "### Now creating an issue:"
  print ""
  new_issue = proj.create_issue("TEST yet another issue",
                                "The summary for the issue we just created.")
  print ""
  print "### Now showing issues again:"
  print ""
  proj.show_all_issues()
  print ""
  print "### Now go delete that issue via the UI (since that's the only way)."
  print ""

  # Try parsing some JIRA XML.
  handler = parse_jira_xml()
  xml.sax.parse(issues_xml, handler)
  issues_xml.close()

if __name__ == '__main__':
  main()
