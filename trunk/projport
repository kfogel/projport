#!/usr/bin/python

# For Google Code Hosting.
import gdata.projecthosting.client
import gdata.projecthosting.data
import gdata.gauth
import gdata.client
import gdata.data
import atom.http_core
import atom.core

# For everything else.
import sys
import re
import getopt
import string
import xml.sax
import xml.sax.handler


def usage(output_stream=sys.stdout):
  output_stream.write("TBD\n")


class Project():
  """A GCH Project, reachable through a client."""
  def __init__(self, name, client):
    self.name = name
    self.client = client
    
  def show_all_issues(self):
    """Show all the issues in a project."""
    feed = self.client.get_issues(self.name)
    for issue in feed.entry:
      print issue.title.text

  def create_issue(self, title, summary):
    """Create an issue."""
    return self.client.add_issue(self.name, title, summary,
                                 "kfogel@gmail.com", labels=[])


def authenticate_client(client, project, username, password):
  """Authenticate CLIENT to PROJECT, with USERNAME and PASSWORD."""
  client.client_login(username, password, source=project, service='code')


def main():
  error_exit   = False
  project_name = None
  username     = None
  password     = None
  issues_xml   = None

  try:
    opts, args = getopt.getopt(sys.argv[1:],
                               '',
                               [ "project=",
                                 "username=",
                                 "password=",
                               ])
  except getopt.GetoptError:
    sys.stderr.write("Error: problem processing options\n")
    usage(sys.stderr)
    sys.exit(1)

  for opt, val in opts:
    if opt == '--help' or opt == '-h' or opt == '-?':
      usage()
      sys.exit(0)
    elif opt == '--project':
      project_name = val
    elif opt == '--username':
      username = val
    elif opt == '--password':
      password = val
    else:
      sys.stderr.write("Error: unrecognized option: '%s'\n" % opt)
      error_exit = True

  if error_exit:
    usage(sys.stderr)
    sys.exit(1)

  client = gdata.projecthosting.client.ProjectHostingClient()
  authenticate_client(client, project_name, username, password)
  proj = Project(project_name, client)
  proj.show_all_issues()
  print ""
  print "### Now creating an issue:"
  print ""
  new_issue = proj.create_issue("TEST yet another issue",
                                "The summary for the issue we just created.")
  print ""
  print "### Now showing issues again:"
  print ""
  proj.show_all_issues()
  # Too bad deleting is only through the UI :-(.

if __name__ == '__main__':
  main()
